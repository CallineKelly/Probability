/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package probability.project;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Scanner;

/**
 *
 * @author Neoh, Varshaa, Tan
 */
public class ProbabilityProject {

    //output of Deck class
    public static void main(String[] args) {
        Deck deck = new Deck(); //create deck of cards
        //System.out.println("--- Sample Data: Deck of Cards ---");
        //System.out.print(deck);
        Scanner scan = new Scanner(System.in);
        boolean isRunning = true; //control looping of the menu
        
        while (isRunning){
            try{
                System.out.println("--- Welcome to Deck Card Probability Calculator! ---");
                System.out.println("Please choose type of probability calculation:");
                System.out.println("1. Marginal Probability");
                System.out.println("2. Joint Probability");
                System.out.println("3. Conditional Probability");
                System.out.println("4. Union of Events");
                System.out.println("5. Check if Events are Disjoint");
                System.out.println("6. Exit");
                System.out.print("Your choice (1-6):");
                int choice = scan.nextInt();
                scan.nextLine();

                switch(choice){
                    case 1:
                        calcMarginalProbability(deck,scan);
                        break;
                    case 2:
                        calcJointProbability(deck,scan);
                        break;
                    case 3:
                        calcConditionalProbability(deck,scan);
                        break;
                    case 4:
                        calculateUnionOfEvents(deck, scan);
                        break;
                    case 5:
                        checkEventsDisjoint(scan);
                        break;
                    case 6:
                        System.out.println("Exiting the program......");
                        isRunning = false;
                        break;
                    default:
                        System.out.println("Invalid choice.Please enter a number between 1 and 6.");
                }
            }catch(java.util.InputMismatchException e){
                System.out.println("Invalid input. Please enter a number between 1 and 6.");
                scan.nextLine();
            }    
        }
        scan.close();
    }
    
    //change all input into lower case, centralize input
    private static String getInput(Scanner scan, String prompt){
        System.out.print(prompt);
        return scan.nextLine().trim().toLowerCase();
    }
    
    private static void calcMarginalProbability(Deck deck, Scanner scan){
        1
                try{    
            System.out.print("Calculate Marginal Probability by Suit(1)or Rank(2):");
                int choice = scan.nextInt();
                scan.nextLine();

                if(choice==1){
                    System.out.print("Enter suit(Heart,Diamond,Club or Spade):");
                    String suit = scan.nextLine();
                    int favorable = deck.countFavorableOutcomesBySuit(suit);
                    int total = deck.getTotalOutcomes();
                    System.out.printf("Marginal Probability of drawing a %s: %.2f%n", suit,(double)favorable/total); 

                }else if (choice==2){
                    System.out.print("Enter Rank(Ace,2,3,4,5,6,7,8,9,King,Queen,Jack):");
                    String rank = scan.nextLine();
                    int favorable = deck.countFavorableOutcomesByRank(rank);
                    int total = deck.getTotalOutcomes();
                    System.out.printf("Marginal Probability of drawing a %s: %.2f%n", rank,(double)favorable/total); 

                }else{
                    System.out.println("Invalid choice!");
                }
        }catch(Exception e){
            System.out.println("Error occured. Please try again.");
        }
    }
    
    private static void calculateProbability(int favorable, int total, String type, String value) {
    if (total == 0) {
        System.out.println("No outcomes available.");
    } else {
        System.out.printf("Probability of %s (%s): %.2f%n", type, value, (double) favorable / total);
    }
}
    
    private static void calcJointProbability(Deck deck, Scanner scan){
        try{
            System.out.print("Enter suit(Heart,Diamond,Club or Spade):");
            String suit = scan.nextLine();
            System.out.print("Enter Rank(Ace,2,3,4,5,6,7,8,9,King,Queen,Jack):");
            String rank = scan.nextLine();

            int jointFavorable = deck.countJointOutcomes(suit, rank);
            int total = deck.getTotalOutcomes();
            System.out.printf("Joint Probability of drawing a %s of %s: %.2f%n", rank,suit,(double)jointFavorable/total);
    
        }catch(Exception e){
            System.out.println("Error occured. Please try again.");
        }
    }
    private static void calcConditionalProbability(Deck deck, Scanner scan){
        try{
            System.out.print("Enter suit(Heart,Diamond,Club or Spade):");
            String suit = scan.nextLine();
            System.out.print("Enter Rank(Ace,2,3,4,5,6,7,8,9,King,Queen,Jack):");
            String rank = scan.nextLine();

            int jointFavorable = deck.countJointOutcomes(suit, rank);
            int suitFavorable = deck.countFavorableOutcomesBySuit(suit);

            if(suitFavorable == 0){
                System.out.println("Conditional Probability cannot be calculated because the condition has no outcomes.");
            }else{
                System.out.printf("Conditional Probability of drawing a %s given %s: %.2f%n", rank,suit,(double)jointFavorable/suitFavorable);
            }
        }catch(Exception e){
            System.out.println("Error occured. Please try again.");
            
        }
    }
    
    //Author by Varshaa
    private static void calculateUnionOfEvents(Deck deck, Scanner scan) {
        List<String> eventA = deck.parseCards(getInput(scan, "Enter Event A (e.g., heart ace, diamond 2): "));
        List<String> eventB = deck.parseCards(getInput(scan, "Enter Event B (e.g., diamond 3, club king): "));
        int total = deck.getTotalOutcomes();
        int eventACount = eventA.size();
        int eventBCount = eventB.size();
        int intersectionCount = deck.countIntersection(eventA, eventB);
            if (total == 0) {
                System.out.println("No outcomes available.");
                return;
            }
        double unionProbability = (double) (eventACount + eventBCount - intersectionCount) / total;
        System.out.printf("Union Probability of Events A and B: %.2f%n", unionProbability);
    }
    
    // Author by Tan Kai Xian
    private static void checkEventsDisjoint(Scanner scan) {
        try {
            // Input Event A
            String eventAInput = getValidCardInput(scan, "Enter Event A (e.g., heart ace, diamond 2): ");
            List<String> eventACards = parseCards(eventAInput);

            // Input Event B
            String eventBInput = getValidCardInput(scan, "Enter Event B (e.g., diamond 3, club king): ");
            List<String> eventBCards = parseCards(eventBInput);

            // Check disjoint
            boolean isDisjoint = areEventsDisjoint(eventACards, eventBCards);
            System.out.println(isDisjoint ? "The events are disjoint." : "The events are NOT disjoint.");
        } catch (Exception e) {
            System.out.println("An error occurred. Please try again.");
        }
    }

    // Method to repeatedly prompt the user until valid card input is provided
    private static String getValidCardInput(Scanner scan, String prompt) {
        String input = "";
        while (true) {
            System.out.print(prompt);
            input = scan.nextLine().trim().toLowerCase(); // Convert to lowercase

            if (isValidCardInput(input)) {
                break;
            } else {
                System.out.println("Invalid input. Please enter cards in the correct format (e.g., 'diamond 3, club king').");
            }
        }
        return input;
    }

    // Method to check if the card input follows the correct format
    private static boolean isValidCardInput(String input) {
        // Regex pattern to validate the card format: "Suit Rank"
        String cardPattern = "(heart|diamond|club|spade) (ace|2|3|4|5|6|7|8|9|10|jack|queen|king)";

        // Split the input by commas and check each card
        String[] cards = input.split(",");
        for (String card : cards) {
            card = card.trim().toLowerCase();
            if (!card.matches(cardPattern)) {
                return false; // Return false if any card doesn't match the pattern
            }
        }
        return true; // Return true if all cards are valid
    }

    // Method to parse cards into a list of valid cards
    private static List<String> parseCards(String input) {
        List<String> cards = new ArrayList<>();
        String[] cardArray = input.split(",");
        for (String card : cardArray) {
            card = card.trim();
            if (isValidCard(card)) {
                cards.add(card);
            } else {
                System.out.println("Invalid card input: " + card);
            }
        }
        return cards;
    }

    // Check if a single card is valid (match with ranks and suits)
    private static boolean isValidCard(String card) {
        String[] validSuits = {"heart", "diamond", "club", "spade"};
        String[] validRanks = {"ace", "2", "3", "4", "5", "6", "7", "8", "9", "10", "jack", "queen", "king"};

        String[] cardParts = card.split(" ");
        return cardParts.length == 2 &&
               Arrays.asList(validSuits).contains(cardParts[0]) &&
               Arrays.asList(validRanks).contains(cardParts[1]);
    }

    // Check if two sets of cards are disjoint
    private static boolean areEventsDisjoint(List<String> eventACards, List<String> eventBCards) {
        for (String cardA : eventACards) {
            if (eventBCards.contains(cardA)) {
                return false;
            }
        }
        return true;
    }

}
