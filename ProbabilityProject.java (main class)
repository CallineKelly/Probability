/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package probability.project;

import java.util.List;
import java.util.Scanner;

/**
 *
 * @author User
 */
public class ProbabilityProject {

    public static void main(String[] args) {
        Deck deck = new Deck(); // create deck of cards
        Scanner scan = new Scanner(System.in);
        boolean isRunning = true; // control looping of the menu

        while (isRunning) {
            try {
                System.out.println("--- Welcome to Deck Card Probability Calculator! ---");
                System.out.println("Please choose type of probability calculation:");
                System.out.println("1. Marginal Probability");
                System.out.println("2. Joint Probability");
                System.out.println("3. Conditional Probability");
                System.out.println("4. Union of Events");
                System.out.println("5. Check if Events are Disjoint");
                System.out.println("6. Exit");
                System.out.print("Your choice (1-6):");
                int choice = scan.nextInt();
                scan.nextLine();

                switch (choice) {
                    case 1:
                        calcMarginalProbability(deck, scan);
                        break;
                    case 2:
                        calcJointProbability(deck, scan);
                        break;
                    case 3:
                        calcConditionalProbability(deck, scan);
                        break;
                    case 4:
                        calculateUnionOfEvents(deck, scan);
                        break;
                    case 5:
                        checkEventsDisjoint(deck, scan);
                        break;
                    case 6:
                        System.out.println("Exiting the program...");
                        isRunning = false;
                        break;
                    default:
                        System.out.println("Invalid choice. Please try again.");
                }
            } catch (java.util.InputMismatchException e) {
                System.out.println("Invalid input. Please enter a number between 1-6.");
                scan.nextLine();
            }
        }
        scan.close();
    }

    private static String getInput(Scanner scan, String prompt) {
        System.out.print(prompt);
        return scan.nextLine().trim().toLowerCase();
    }

    private static void calcMarginalProbability(Deck deck, Scanner scan) {
        String choice = getInput(scan, "Calculate by Suit(1) or Rank(2): ");
        if ("1".equals(choice)) {
            String suit = getInput(scan, "Enter suit (heart, diamond, club, spade): ");
            calculateProbability(deck.countFavorableOutcomesBySuit(suit), deck.getTotalOutcomes(), "suit", suit);
        } else if ("2".equals(choice)) {
            String rank = getInput(scan, "Enter rank (ace, 2, 3, ..., king): ");
            calculateProbability(deck.countFavorableOutcomesByRank(rank), deck.getTotalOutcomes(), "rank", rank);
        } else {
            System.out.println("Invalid choice.");
        }
    }

    private static void calculateProbability(int favorable, int total, String type, String value) {
        if (total == 0) {
            System.out.println("No outcomes available.");
        } else {
            System.out.printf("Probability of %s (%s): %.2f%n", type, value, (double) favorable / total);
        }
    }

    private static void calcJointProbability(Deck deck, Scanner scan) {
        try {
            System.out.print("Enter suit (Heart, Diamond, Club, or Spade): ");
            String suit = scan.nextLine();
            System.out.print("Enter rank (Ace, 2, 3, 4, ..., King): ");
            String rank = scan.nextLine();

            int jointFavorable = deck.countJointOutcomes(suit, rank);
            int total = deck.getTotalOutcomes();
            System.out.printf("Joint Probability of drawing a %s of %s: %.2f%n", rank, suit, (double) jointFavorable / total);
        } catch (Exception e) {
            System.out.println("Error occurred. Please try again.");
        }
    }

    private static void calcConditionalProbability(Deck deck, Scanner scan) {
        try {
            System.out.print("Enter suit (Heart, Diamond, Club, or Spade): ");
            String suit = scan.nextLine();
            System.out.print("Enter rank (Ace, 2, 3, 4, ..., King): ");
            String rank = scan.nextLine();

            int jointFavorable = deck.countJointOutcomes(suit, rank);
            int suitFavorable = deck.countFavorableOutcomesBySuit(suit);

            if (suitFavorable == 0) {
                System.out.println("Conditional Probability cannot be calculated because the condition has no outcomes.");
            } else {
                System.out.printf("Conditional Probability of drawing a %s given %s: %.2f%n", rank, suit, (double) jointFavorable / suitFavorable);
            }
        } catch (Exception e) {
            System.out.println("Error occurred. Please try again.");
        }
    }

    private static void calculateUnionOfEvents(Deck deck, Scanner scan) {
        List<String> eventA = deck.parseCards(getInput(scan, "Enter Event A (e.g., heart ace, diamond 2): "));
        List<String> eventB = deck.parseCards(getInput(scan, "Enter Event B (e.g., diamond 3, club king): "));

        int total = deck.getTotalOutcomes();
        int eventACount = eventA.size();
        int eventBCount = eventB.size();
        int intersectionCount = deck.countIntersection(eventA, eventB);

        if (total == 0) {
            System.out.println("No outcomes available.");
            return;
        }

        double unionProbability = (double) (eventACount + eventBCount - intersectionCount) / total;
        System.out.printf("Union Probability of Events A and B: %.2f%n", unionProbability);
    }

    private static void checkEventsDisjoint(Deck deck, Scanner scan) {
        List<String> eventA = deck.parseCards(getInput(scan, "Enter Event A (e.g., heart ace, diamond 2): "));
        List<String> eventB = deck.parseCards(getInput(scan, "Enter Event B (e.g., diamond 3, club king): "));

        boolean disjoint = deck.areEventsDisjoint(eventA, eventB);
        System.out.println(disjoint ? "Events are disjoint." : "Events are NOT disjoint.");
    }
}
